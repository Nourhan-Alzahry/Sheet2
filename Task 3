import re

def generate_playfair_matrix(keyword):
    alphabet = "ABCDEFGHIKLMNOPQRSTUVWXYZ"
    keyword = "".join(dict.fromkeys(keyword.upper().replace("J", "I").replace(" ", ""))) 
    key_string = keyword + "".join([c for c in alphabet if c not in keyword])
    return [list(key_string[i:i+5]) for i in range(0, 25, 5)]

def find_position(matrix, letter):
    for row_idx, row in enumerate(matrix):
        if letter in row:
            return row_idx, row.index(letter)
    raise ValueError(f"Letter '{letter}' not found in Playfair matrix.")

def encrypt_pair(matrix, a, b):
    row_a, col_a = find_position(matrix, a)
    row_b, col_b = find_position(matrix, b)
    
    if row_a == row_b:  # Same row
        return matrix[row_a][(col_a + 1) % 5] + matrix[row_b][(col_b + 1) % 5]
    elif col_a == col_b:  # Same column
        return matrix[(row_a + 1) % 5][col_a] + matrix[(row_b + 1) % 5][col_b]
    else:  # Rectangle swap
        return matrix[row_a][col_b] + matrix[row_b][col_a]

def decrypt_pair(matrix, a, b):
    row_a, col_a = find_position(matrix, a)
    row_b, col_b = find_position(matrix, b)
    
    if row_a == row_b:  # Same row
        return matrix[row_a][(col_a - 1) % 5] + matrix[row_b][(col_b - 1) % 5]
    elif col_a == col_b:  # Same column
        return matrix[(row_a - 1) % 5][col_a] + matrix[(row_b - 1) % 5][col_b]
    else:  # Rectangle swap
        return matrix[row_a][col_b] + matrix[row_b][col_a]

def prepare_text(text):
    text = re.sub(r'[^A-Z]', '', text.upper().replace("J", "I"))
    prepared = ""
    i = 0
    while i < len(text):
        a = text[i]
        b = text[i + 1] if i + 1 < len(text) else "X"
        if a == b:
            prepared += a + "X"
            i += 1
        else:
            prepared += a + b
            i += 2
    return prepared

def encrypt_text(matrix, text):
    text = prepare_text(text)
    return "".join(encrypt_pair(matrix, text[i], text[i + 1]) for i in range(0, len(text), 2))

def decrypt_text(matrix, text):
    text = prepare_text(text)  
    return "".join(decrypt_pair(matrix, text[i], text[i + 1]) for i in range(0, len(text), 2))


keyword = input("Enter the keyword: ")
action = input("Do you want to encrypt or decrypt? (e/d): ").strip().lower()
text = input("Enter the text: ")

matrix = generate_playfair_matrix(keyword)
print("\nPlayfair Matrix:")
for row in matrix:
    print(" ".join(row))

text = re.sub(r'[^A-Z]', '', text.upper().replace("J", "I"))  
if action == "e":
    result = encrypt_text(matrix, text)
    print("Encrypted:", result)
elif action == "d":
    result = decrypt_text(matrix, text)
    print("Decrypted:", result)
else:
    print("Invalid choice. Please enter 'e' for encryption or 'd' for decryption.")
